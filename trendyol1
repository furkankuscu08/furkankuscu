
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

cal_housing = fetch_california_housing() 
X = pd.DataFrame(cal_housing.data, columns=cal_housing.feature_names) 
y = cal_housing.target 
 
df = pd.DataFrame( 
        dict(MedInc=X['MedInc'], Price=cal_housing.target))
        
X=df["MedInc"]
y=df["Price"]

def huber(epoch, X, Y, delta, lr):
    
    B1 = 1 # (randomly chosen)
    B0 = 0 # (randomly chosen)
    
    for i in range(epoch):
        
        B1_gr = 0
        B0_gr = 0
        
        le = len(X)
    
        for i in range(le):
        
            if abs(Y[i] - B1*X[i] - B0) <= delta:
                B1_gr += -X[i] * (Y[i] - (B1*X[i] + B0))
                B0_gr += - (Y[i] - (B1*X[i] + B0))
        
            else:
                B1_gr += delta * X[i] * ((B1*X[i] + B0) - Y[i]) / abs((B1*X[i] + B0) - Y[i])
                B0_gr += delta * ((B1*X[i] + B0) - Y[i]) / abs((B1*X[i] + B0) - Y[i])
    
        B1 = B1 - ((B1_gr / float(le)) * lr)
        B0 = B0 - ((B0_gr / float(le)) * lr)

    return B1, B0

def predict(X,B1,B0):
    y_pred = (X*B1)+B0
    return y_pred

B1,B0 = huber(50, X, y, 3, 0.01)
print('B1:',B1)
print('B0:',B0)

y_pred = predict(X,B1,B0)

print('Mean Absolute Error:',mean_absolute_error(y,y_pred))
print('Mean Squared Error:',mean_squared_error(y,y_pred))

# Huber Loss kullanmayı tercih ettim çünkü hem türevlenebilir bir convex cost fonksiyonu veriyor hem de büyük değerleri aşırı cezalandırmıyor.
# Bu loss function'da delta'dan küçük değerler için mean squared error kullanırken deltadan büyükler için mean absolute error kullanıyor.
# Grafiği çizildiğinde is convex olduğu ve türevlenebilir olduğu görülebilir.
# https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ7REPUTzZx0WbAlJK2bPtpQqSIsrSeVOfbii5OqgzCCYqrXbGiwPJALXQq06CI3YHGveo&usqp=CAU










